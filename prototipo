  //SPDX-License-Identifier: MIT
  pragma solidity 0.8.24;
  
  contract mybankV1 {
  
  string public myName;
  uint public balanceTokenA;
  uint public balanceTokenB;
  uint internal priceAB = 10;// a price is 10 Bs == 10 B/A == you need 1 A to buy 10B
  address public userAccount;
  bool public isDepositedTokenA;
  bool public isDepositedTokenB;
  //bool public isRegistered;
  
  uint public myFriendBalanceA;
  
  function setName (string memory _name) public {
      myName = _name;
  }
  
  function setUserAccount (address _account) public { 
      userAccount = _account;
  } 
  
  function depositTokenA() public {
      require(isDepositedTokenA == false, "Ya has depositado A!");
      balanceTokenA = 1000;
      isDepositedTokenA = true;
  }
  
  function depositTokenB() public {
      if(isDepositedTokenB == false){
          balanceTokenB = 10000;
          isDepositedTokenB = true;
      } //else { //nothing }
  }
  
  function swapFromAToB( uint amountToSwap ) public {
      require(balanceTokenA >= amountToSwap);
      require(amountToSwap >= 10); // nos falto poner este controlador
      balanceTokenA = balanceTokenA - amountToSwap; // Si se modifica balanceA 
      // Si se intenta cambiar menos de 10As, (1 /10 = 0 en Solidity)
      uint amountBToReceive = amountToSwap / priceAB;
      balanceTokenB = balanceTokenB + amountBToReceive; // Se le suma 0 a balanceB
  }
  
  function swapFromBToA ( uint amountBToSwap) public {
      require(balanceTokenB >= amountBToSwap);
      require (amountBToSwap >= 1);
      balanceTokenB = balanceTokenB - amountBToSwap;
      uint amountAToReceive = amountBToSwap * pricAB;
      balanceTokenA = balanceTokenA + amountAToReceive;
  }
  
        function transferTokenAToMyFriend(uint amount) public {
      requiere(amount <= balanceTokenA);
      balanceTokenA = myFriendBalanceA - amount;
      myFriendBalanceA = myFriendBalanceA + amount;
       }
}
